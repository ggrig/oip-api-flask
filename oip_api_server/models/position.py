# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from oip_api_server.models.base_model_ import Model
from oip_api_server import util


class Position(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, company: str=None, process_number: int=None, reservation_no: int=None, position_no: int=None, client_guestname1: str=None, client_guestname2: str=None, client_company: str=None, room_type: int=None, number_of_rooms: int=None, number_of_person: int=None, breakfast_approval_status: str=None, arrival_date: date=None, departure_date: date=None, number_of_nights: int=None, rate_description: str=None, rate_type: int=None, breakfast_type: int=None, breakfast_price: float=None, currency_factor: float=None, currency_code: str=None, commission_amount: float=None, comission_rate: float=None, room_price: float=None, ranking_booster: float=None, booking_quality: int=None, booking_code: str=None, quality_at: datetime=None, quality_by_user: str=None, reservation_source: str=None, deduction_type: int=None, calculated_with_function_id: str=None, customer_no: str=None, taf_line_amount: float=None, agency_line_amount: float=None, line_amount: float=None, line_amount_including_vat: float=None, amount_including_vat: float=None, total_amount_including_vat: float=None):  # noqa: E501
        """Position - a model defined in Swagger

        :param company: The company of this Position.  # noqa: E501
        :type company: str
        :param process_number: The process_number of this Position.  # noqa: E501
        :type process_number: int
        :param reservation_no: The reservation_no of this Position.  # noqa: E501
        :type reservation_no: int
        :param position_no: The position_no of this Position.  # noqa: E501
        :type position_no: int
        :param client_guestname1: The client_guestname1 of this Position.  # noqa: E501
        :type client_guestname1: str
        :param client_guestname2: The client_guestname2 of this Position.  # noqa: E501
        :type client_guestname2: str
        :param client_company: The client_company of this Position.  # noqa: E501
        :type client_company: str
        :param room_type: The room_type of this Position.  # noqa: E501
        :type room_type: int
        :param number_of_rooms: The number_of_rooms of this Position.  # noqa: E501
        :type number_of_rooms: int
        :param number_of_person: The number_of_person of this Position.  # noqa: E501
        :type number_of_person: int
        :param breakfast_approval_status: The breakfast_approval_status of this Position.  # noqa: E501
        :type breakfast_approval_status: str
        :param arrival_date: The arrival_date of this Position.  # noqa: E501
        :type arrival_date: date
        :param departure_date: The departure_date of this Position.  # noqa: E501
        :type departure_date: date
        :param number_of_nights: The number_of_nights of this Position.  # noqa: E501
        :type number_of_nights: int
        :param rate_description: The rate_description of this Position.  # noqa: E501
        :type rate_description: str
        :param rate_type: The rate_type of this Position.  # noqa: E501
        :type rate_type: int
        :param breakfast_type: The breakfast_type of this Position.  # noqa: E501
        :type breakfast_type: int
        :param breakfast_price: The breakfast_price of this Position.  # noqa: E501
        :type breakfast_price: float
        :param currency_factor: The currency_factor of this Position.  # noqa: E501
        :type currency_factor: float
        :param currency_code: The currency_code of this Position.  # noqa: E501
        :type currency_code: str
        :param commission_amount: The commission_amount of this Position.  # noqa: E501
        :type commission_amount: float
        :param comission_rate: The comission_rate of this Position.  # noqa: E501
        :type comission_rate: float
        :param room_price: The room_price of this Position.  # noqa: E501
        :type room_price: float
        :param ranking_booster: The ranking_booster of this Position.  # noqa: E501
        :type ranking_booster: float
        :param booking_quality: The booking_quality of this Position.  # noqa: E501
        :type booking_quality: int
        :param booking_code: The booking_code of this Position.  # noqa: E501
        :type booking_code: str
        :param quality_at: The quality_at of this Position.  # noqa: E501
        :type quality_at: datetime
        :param quality_by_user: The quality_by_user of this Position.  # noqa: E501
        :type quality_by_user: str
        :param reservation_source: The reservation_source of this Position.  # noqa: E501
        :type reservation_source: str
        :param deduction_type: The deduction_type of this Position.  # noqa: E501
        :type deduction_type: int
        :param calculated_with_function_id: The calculated_with_function_id of this Position.  # noqa: E501
        :type calculated_with_function_id: str
        :param customer_no: The customer_no of this Position.  # noqa: E501
        :type customer_no: str
        :param taf_line_amount: The taf_line_amount of this Position.  # noqa: E501
        :type taf_line_amount: float
        :param agency_line_amount: The agency_line_amount of this Position.  # noqa: E501
        :type agency_line_amount: float
        :param line_amount: The line_amount of this Position.  # noqa: E501
        :type line_amount: float
        :param line_amount_including_vat: The line_amount_including_vat of this Position.  # noqa: E501
        :type line_amount_including_vat: float
        :param amount_including_vat: The amount_including_vat of this Position.  # noqa: E501
        :type amount_including_vat: float
        :param total_amount_including_vat: The total_amount_including_vat of this Position.  # noqa: E501
        :type total_amount_including_vat: float
        """
        self.swagger_types = {
            'company': str,
            'process_number': int,
            'reservation_no': int,
            'position_no': int,
            'client_guestname1': str,
            'client_guestname2': str,
            'client_company': str,
            'room_type': int,
            'number_of_rooms': int,
            'number_of_person': int,
            'breakfast_approval_status': str,
            'arrival_date': date,
            'departure_date': date,
            'number_of_nights': int,
            'rate_description': str,
            'rate_type': int,
            'breakfast_type': int,
            'breakfast_price': float,
            'currency_factor': float,
            'currency_code': str,
            'commission_amount': float,
            'comission_rate': float,
            'room_price': float,
            'ranking_booster': float,
            'booking_quality': int,
            'booking_code': str,
            'quality_at': datetime,
            'quality_by_user': str,
            'reservation_source': str,
            'deduction_type': int,
            'calculated_with_function_id': str,
            'customer_no': str,
            'taf_line_amount': float,
            'agency_line_amount': float,
            'line_amount': float,
            'line_amount_including_vat': float,
            'amount_including_vat': float,
            'total_amount_including_vat': float
        }

        self.attribute_map = {
            'company': 'Company',
            'process_number': 'ProcessNumber',
            'reservation_no': 'ReservationNo',
            'position_no': 'PositionNo',
            'client_guestname1': 'ClientGuestname1',
            'client_guestname2': 'ClientGuestname2',
            'client_company': 'ClientCompany',
            'room_type': 'RoomType',
            'number_of_rooms': 'NumberOfRooms',
            'number_of_person': 'NumberOfPerson',
            'breakfast_approval_status': 'BreakfastApprovalStatus',
            'arrival_date': 'ArrivalDate',
            'departure_date': 'DepartureDate',
            'number_of_nights': 'NumberOfNights',
            'rate_description': 'RateDescription',
            'rate_type': 'RateType',
            'breakfast_type': 'BreakfastType',
            'breakfast_price': 'BreakfastPrice',
            'currency_factor': 'CurrencyFactor',
            'currency_code': 'CurrencyCode',
            'commission_amount': 'CommissionAmount',
            'comission_rate': 'ComissionRate',
            'room_price': 'RoomPrice',
            'ranking_booster': 'RankingBooster',
            'booking_quality': 'BookingQuality',
            'booking_code': 'BookingCode',
            'quality_at': 'QualityAt',
            'quality_by_user': 'QualityByUser',
            'reservation_source': 'ReservationSource',
            'deduction_type': 'DeductionType',
            'calculated_with_function_id': 'CalculatedWithFunctionID',
            'customer_no': 'CustomerNo',
            'taf_line_amount': 'TafLineAmount',
            'agency_line_amount': 'AgencyLineAmount',
            'line_amount': 'LineAmount',
            'line_amount_including_vat': 'LineAmountIncludingVAT',
            'amount_including_vat': 'AmountIncludingVAT',
            'total_amount_including_vat': 'TotalAmountIncludingVAT'
        }
        self._company = company
        self._process_number = process_number
        self._reservation_no = reservation_no
        self._position_no = position_no
        self._client_guestname1 = client_guestname1
        self._client_guestname2 = client_guestname2
        self._client_company = client_company
        self._room_type = room_type
        self._number_of_rooms = number_of_rooms
        self._number_of_person = number_of_person
        self._breakfast_approval_status = breakfast_approval_status
        self._arrival_date = arrival_date
        self._departure_date = departure_date
        self._number_of_nights = number_of_nights
        self._rate_description = rate_description
        self._rate_type = rate_type
        self._breakfast_type = breakfast_type
        self._breakfast_price = breakfast_price
        self._currency_factor = currency_factor
        self._currency_code = currency_code
        self._commission_amount = commission_amount
        self._comission_rate = comission_rate
        self._room_price = room_price
        self._ranking_booster = ranking_booster
        self._booking_quality = booking_quality
        self._booking_code = booking_code
        self._quality_at = quality_at
        self._quality_by_user = quality_by_user
        self._reservation_source = reservation_source
        self._deduction_type = deduction_type
        self._calculated_with_function_id = calculated_with_function_id
        self._customer_no = customer_no
        self._taf_line_amount = taf_line_amount
        self._agency_line_amount = agency_line_amount
        self._line_amount = line_amount
        self._line_amount_including_vat = line_amount_including_vat
        self._amount_including_vat = amount_including_vat
        self._total_amount_including_vat = total_amount_including_vat

    @classmethod
    def from_dict(cls, dikt) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Position of this Position.  # noqa: E501
        :rtype: Position
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self) -> str:
        """Gets the company of this Position.


        :return: The company of this Position.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Position.


        :param company: The company of this Position.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def process_number(self) -> int:
        """Gets the process_number of this Position.


        :return: The process_number of this Position.
        :rtype: int
        """
        return self._process_number

    @process_number.setter
    def process_number(self, process_number: int):
        """Sets the process_number of this Position.


        :param process_number: The process_number of this Position.
        :type process_number: int
        """
        if process_number is None:
            raise ValueError("Invalid value for `process_number`, must not be `None`")  # noqa: E501

        self._process_number = process_number

    @property
    def reservation_no(self) -> int:
        """Gets the reservation_no of this Position.


        :return: The reservation_no of this Position.
        :rtype: int
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no: int):
        """Sets the reservation_no of this Position.


        :param reservation_no: The reservation_no of this Position.
        :type reservation_no: int
        """
        if reservation_no is None:
            raise ValueError("Invalid value for `reservation_no`, must not be `None`")  # noqa: E501

        self._reservation_no = reservation_no

    @property
    def position_no(self) -> int:
        """Gets the position_no of this Position.


        :return: The position_no of this Position.
        :rtype: int
        """
        return self._position_no

    @position_no.setter
    def position_no(self, position_no: int):
        """Sets the position_no of this Position.


        :param position_no: The position_no of this Position.
        :type position_no: int
        """
        if position_no is None:
            raise ValueError("Invalid value for `position_no`, must not be `None`")  # noqa: E501

        self._position_no = position_no

    @property
    def client_guestname1(self) -> str:
        """Gets the client_guestname1 of this Position.


        :return: The client_guestname1 of this Position.
        :rtype: str
        """
        return self._client_guestname1

    @client_guestname1.setter
    def client_guestname1(self, client_guestname1: str):
        """Sets the client_guestname1 of this Position.


        :param client_guestname1: The client_guestname1 of this Position.
        :type client_guestname1: str
        """
        if client_guestname1 is None:
            raise ValueError("Invalid value for `client_guestname1`, must not be `None`")  # noqa: E501

        self._client_guestname1 = client_guestname1

    @property
    def client_guestname2(self) -> str:
        """Gets the client_guestname2 of this Position.


        :return: The client_guestname2 of this Position.
        :rtype: str
        """
        return self._client_guestname2

    @client_guestname2.setter
    def client_guestname2(self, client_guestname2: str):
        """Sets the client_guestname2 of this Position.


        :param client_guestname2: The client_guestname2 of this Position.
        :type client_guestname2: str
        """

        self._client_guestname2 = client_guestname2

    @property
    def client_company(self) -> str:
        """Gets the client_company of this Position.


        :return: The client_company of this Position.
        :rtype: str
        """
        return self._client_company

    @client_company.setter
    def client_company(self, client_company: str):
        """Sets the client_company of this Position.


        :param client_company: The client_company of this Position.
        :type client_company: str
        """

        self._client_company = client_company

    @property
    def room_type(self) -> int:
        """Gets the room_type of this Position.


        :return: The room_type of this Position.
        :rtype: int
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type: int):
        """Sets the room_type of this Position.


        :param room_type: The room_type of this Position.
        :type room_type: int
        """

        self._room_type = room_type

    @property
    def number_of_rooms(self) -> int:
        """Gets the number_of_rooms of this Position.


        :return: The number_of_rooms of this Position.
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms: int):
        """Sets the number_of_rooms of this Position.


        :param number_of_rooms: The number_of_rooms of this Position.
        :type number_of_rooms: int
        """

        self._number_of_rooms = number_of_rooms

    @property
    def number_of_person(self) -> int:
        """Gets the number_of_person of this Position.


        :return: The number_of_person of this Position.
        :rtype: int
        """
        return self._number_of_person

    @number_of_person.setter
    def number_of_person(self, number_of_person: int):
        """Sets the number_of_person of this Position.


        :param number_of_person: The number_of_person of this Position.
        :type number_of_person: int
        """

        self._number_of_person = number_of_person

    @property
    def breakfast_approval_status(self) -> str:
        """Gets the breakfast_approval_status of this Position.


        :return: The breakfast_approval_status of this Position.
        :rtype: str
        """
        return self._breakfast_approval_status

    @breakfast_approval_status.setter
    def breakfast_approval_status(self, breakfast_approval_status: str):
        """Sets the breakfast_approval_status of this Position.


        :param breakfast_approval_status: The breakfast_approval_status of this Position.
        :type breakfast_approval_status: str
        """

        self._breakfast_approval_status = breakfast_approval_status

    @property
    def arrival_date(self) -> date:
        """Gets the arrival_date of this Position.


        :return: The arrival_date of this Position.
        :rtype: date
        """
        return self._arrival_date

    @arrival_date.setter
    def arrival_date(self, arrival_date: date):
        """Sets the arrival_date of this Position.


        :param arrival_date: The arrival_date of this Position.
        :type arrival_date: date
        """

        self._arrival_date = arrival_date

    @property
    def departure_date(self) -> date:
        """Gets the departure_date of this Position.


        :return: The departure_date of this Position.
        :rtype: date
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date: date):
        """Sets the departure_date of this Position.


        :param departure_date: The departure_date of this Position.
        :type departure_date: date
        """

        self._departure_date = departure_date

    @property
    def number_of_nights(self) -> int:
        """Gets the number_of_nights of this Position.


        :return: The number_of_nights of this Position.
        :rtype: int
        """
        return self._number_of_nights

    @number_of_nights.setter
    def number_of_nights(self, number_of_nights: int):
        """Sets the number_of_nights of this Position.


        :param number_of_nights: The number_of_nights of this Position.
        :type number_of_nights: int
        """

        self._number_of_nights = number_of_nights

    @property
    def rate_description(self) -> str:
        """Gets the rate_description of this Position.


        :return: The rate_description of this Position.
        :rtype: str
        """
        return self._rate_description

    @rate_description.setter
    def rate_description(self, rate_description: str):
        """Sets the rate_description of this Position.


        :param rate_description: The rate_description of this Position.
        :type rate_description: str
        """

        self._rate_description = rate_description

    @property
    def rate_type(self) -> int:
        """Gets the rate_type of this Position.


        :return: The rate_type of this Position.
        :rtype: int
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type: int):
        """Sets the rate_type of this Position.


        :param rate_type: The rate_type of this Position.
        :type rate_type: int
        """

        self._rate_type = rate_type

    @property
    def breakfast_type(self) -> int:
        """Gets the breakfast_type of this Position.


        :return: The breakfast_type of this Position.
        :rtype: int
        """
        return self._breakfast_type

    @breakfast_type.setter
    def breakfast_type(self, breakfast_type: int):
        """Sets the breakfast_type of this Position.


        :param breakfast_type: The breakfast_type of this Position.
        :type breakfast_type: int
        """

        self._breakfast_type = breakfast_type

    @property
    def breakfast_price(self) -> float:
        """Gets the breakfast_price of this Position.


        :return: The breakfast_price of this Position.
        :rtype: float
        """
        return self._breakfast_price

    @breakfast_price.setter
    def breakfast_price(self, breakfast_price: float):
        """Sets the breakfast_price of this Position.


        :param breakfast_price: The breakfast_price of this Position.
        :type breakfast_price: float
        """

        self._breakfast_price = breakfast_price

    @property
    def currency_factor(self) -> float:
        """Gets the currency_factor of this Position.


        :return: The currency_factor of this Position.
        :rtype: float
        """
        return self._currency_factor

    @currency_factor.setter
    def currency_factor(self, currency_factor: float):
        """Sets the currency_factor of this Position.


        :param currency_factor: The currency_factor of this Position.
        :type currency_factor: float
        """

        self._currency_factor = currency_factor

    @property
    def currency_code(self) -> str:
        """Gets the currency_code of this Position.


        :return: The currency_code of this Position.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """Sets the currency_code of this Position.


        :param currency_code: The currency_code of this Position.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def commission_amount(self) -> float:
        """Gets the commission_amount of this Position.


        :return: The commission_amount of this Position.
        :rtype: float
        """
        return self._commission_amount

    @commission_amount.setter
    def commission_amount(self, commission_amount: float):
        """Sets the commission_amount of this Position.


        :param commission_amount: The commission_amount of this Position.
        :type commission_amount: float
        """

        self._commission_amount = commission_amount

    @property
    def comission_rate(self) -> float:
        """Gets the comission_rate of this Position.


        :return: The comission_rate of this Position.
        :rtype: float
        """
        return self._comission_rate

    @comission_rate.setter
    def comission_rate(self, comission_rate: float):
        """Sets the comission_rate of this Position.


        :param comission_rate: The comission_rate of this Position.
        :type comission_rate: float
        """

        self._comission_rate = comission_rate

    @property
    def room_price(self) -> float:
        """Gets the room_price of this Position.


        :return: The room_price of this Position.
        :rtype: float
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price: float):
        """Sets the room_price of this Position.


        :param room_price: The room_price of this Position.
        :type room_price: float
        """

        self._room_price = room_price

    @property
    def ranking_booster(self) -> float:
        """Gets the ranking_booster of this Position.


        :return: The ranking_booster of this Position.
        :rtype: float
        """
        return self._ranking_booster

    @ranking_booster.setter
    def ranking_booster(self, ranking_booster: float):
        """Sets the ranking_booster of this Position.


        :param ranking_booster: The ranking_booster of this Position.
        :type ranking_booster: float
        """

        self._ranking_booster = ranking_booster

    @property
    def booking_quality(self) -> int:
        """Gets the booking_quality of this Position.


        :return: The booking_quality of this Position.
        :rtype: int
        """
        return self._booking_quality

    @booking_quality.setter
    def booking_quality(self, booking_quality: int):
        """Sets the booking_quality of this Position.


        :param booking_quality: The booking_quality of this Position.
        :type booking_quality: int
        """

        self._booking_quality = booking_quality

    @property
    def booking_code(self) -> str:
        """Gets the booking_code of this Position.


        :return: The booking_code of this Position.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code: str):
        """Sets the booking_code of this Position.


        :param booking_code: The booking_code of this Position.
        :type booking_code: str
        """

        self._booking_code = booking_code

    @property
    def quality_at(self) -> datetime:
        """Gets the quality_at of this Position.


        :return: The quality_at of this Position.
        :rtype: datetime
        """
        return self._quality_at

    @quality_at.setter
    def quality_at(self, quality_at: datetime):
        """Sets the quality_at of this Position.


        :param quality_at: The quality_at of this Position.
        :type quality_at: datetime
        """

        self._quality_at = quality_at

    @property
    def quality_by_user(self) -> str:
        """Gets the quality_by_user of this Position.


        :return: The quality_by_user of this Position.
        :rtype: str
        """
        return self._quality_by_user

    @quality_by_user.setter
    def quality_by_user(self, quality_by_user: str):
        """Sets the quality_by_user of this Position.


        :param quality_by_user: The quality_by_user of this Position.
        :type quality_by_user: str
        """

        self._quality_by_user = quality_by_user

    @property
    def reservation_source(self) -> str:
        """Gets the reservation_source of this Position.


        :return: The reservation_source of this Position.
        :rtype: str
        """
        return self._reservation_source

    @reservation_source.setter
    def reservation_source(self, reservation_source: str):
        """Sets the reservation_source of this Position.


        :param reservation_source: The reservation_source of this Position.
        :type reservation_source: str
        """

        self._reservation_source = reservation_source

    @property
    def deduction_type(self) -> int:
        """Gets the deduction_type of this Position.


        :return: The deduction_type of this Position.
        :rtype: int
        """
        return self._deduction_type

    @deduction_type.setter
    def deduction_type(self, deduction_type: int):
        """Sets the deduction_type of this Position.


        :param deduction_type: The deduction_type of this Position.
        :type deduction_type: int
        """

        self._deduction_type = deduction_type

    @property
    def calculated_with_function_id(self) -> str:
        """Gets the calculated_with_function_id of this Position.


        :return: The calculated_with_function_id of this Position.
        :rtype: str
        """
        return self._calculated_with_function_id

    @calculated_with_function_id.setter
    def calculated_with_function_id(self, calculated_with_function_id: str):
        """Sets the calculated_with_function_id of this Position.


        :param calculated_with_function_id: The calculated_with_function_id of this Position.
        :type calculated_with_function_id: str
        """

        self._calculated_with_function_id = calculated_with_function_id

    @property
    def customer_no(self) -> str:
        """Gets the customer_no of this Position.


        :return: The customer_no of this Position.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no: str):
        """Sets the customer_no of this Position.


        :param customer_no: The customer_no of this Position.
        :type customer_no: str
        """

        self._customer_no = customer_no

    @property
    def taf_line_amount(self) -> float:
        """Gets the taf_line_amount of this Position.


        :return: The taf_line_amount of this Position.
        :rtype: float
        """
        return self._taf_line_amount

    @taf_line_amount.setter
    def taf_line_amount(self, taf_line_amount: float):
        """Sets the taf_line_amount of this Position.


        :param taf_line_amount: The taf_line_amount of this Position.
        :type taf_line_amount: float
        """

        self._taf_line_amount = taf_line_amount

    @property
    def agency_line_amount(self) -> float:
        """Gets the agency_line_amount of this Position.


        :return: The agency_line_amount of this Position.
        :rtype: float
        """
        return self._agency_line_amount

    @agency_line_amount.setter
    def agency_line_amount(self, agency_line_amount: float):
        """Sets the agency_line_amount of this Position.


        :param agency_line_amount: The agency_line_amount of this Position.
        :type agency_line_amount: float
        """

        self._agency_line_amount = agency_line_amount

    @property
    def line_amount(self) -> float:
        """Gets the line_amount of this Position.


        :return: The line_amount of this Position.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount: float):
        """Sets the line_amount of this Position.


        :param line_amount: The line_amount of this Position.
        :type line_amount: float
        """

        self._line_amount = line_amount

    @property
    def line_amount_including_vat(self) -> float:
        """Gets the line_amount_including_vat of this Position.


        :return: The line_amount_including_vat of this Position.
        :rtype: float
        """
        return self._line_amount_including_vat

    @line_amount_including_vat.setter
    def line_amount_including_vat(self, line_amount_including_vat: float):
        """Sets the line_amount_including_vat of this Position.


        :param line_amount_including_vat: The line_amount_including_vat of this Position.
        :type line_amount_including_vat: float
        """

        self._line_amount_including_vat = line_amount_including_vat

    @property
    def amount_including_vat(self) -> float:
        """Gets the amount_including_vat of this Position.


        :return: The amount_including_vat of this Position.
        :rtype: float
        """
        return self._amount_including_vat

    @amount_including_vat.setter
    def amount_including_vat(self, amount_including_vat: float):
        """Sets the amount_including_vat of this Position.


        :param amount_including_vat: The amount_including_vat of this Position.
        :type amount_including_vat: float
        """

        self._amount_including_vat = amount_including_vat

    @property
    def total_amount_including_vat(self) -> float:
        """Gets the total_amount_including_vat of this Position.


        :return: The total_amount_including_vat of this Position.
        :rtype: float
        """
        return self._total_amount_including_vat

    @total_amount_including_vat.setter
    def total_amount_including_vat(self, total_amount_including_vat: float):
        """Sets the total_amount_including_vat of this Position.


        :param total_amount_including_vat: The total_amount_including_vat of this Position.
        :type total_amount_including_vat: float
        """

        self._total_amount_including_vat = total_amount_including_vat
