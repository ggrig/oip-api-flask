# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from oip_api_server.models.base_model_ import Model
from oip_api_server import util


class PaymentmethodsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, code: str=None, description: str=None, bal_account_type: str=None, bal_account_no: str=None, surcharge_variable: str=None, surcharge_fix: str=None, cutoff_amount_variable: str=None, fee_account: str=None, pay_view_code: str=None, cutoff_amount_fee: str=None, default_payment_type_code: str=None, single_payment: str=None, default_pmt_bank_account_no: str=None, separate_pmt_proposal_head: str=None, vendor_purpose_text: str=None, customer_purpose_text: str=None, payment_note_purpose_text: str=None, vendor_purpose_text_header: str=None, purpose_text_footer: str=None, limit_payment_amount_lcy: str=None, customer_purpose_text_header: str=None, limit_lines_per_head: str=None, min_pos_payment_note: str=None, limit_lines_per_head_x: str=None, min_pos_payment_note_x: str=None, tenant: str=None):  # noqa: E501
        """PaymentmethodsBody - a model defined in Swagger

        :param code: The code of this PaymentmethodsBody.  # noqa: E501
        :type code: str
        :param description: The description of this PaymentmethodsBody.  # noqa: E501
        :type description: str
        :param bal_account_type: The bal_account_type of this PaymentmethodsBody.  # noqa: E501
        :type bal_account_type: str
        :param bal_account_no: The bal_account_no of this PaymentmethodsBody.  # noqa: E501
        :type bal_account_no: str
        :param surcharge_variable: The surcharge_variable of this PaymentmethodsBody.  # noqa: E501
        :type surcharge_variable: str
        :param surcharge_fix: The surcharge_fix of this PaymentmethodsBody.  # noqa: E501
        :type surcharge_fix: str
        :param cutoff_amount_variable: The cutoff_amount_variable of this PaymentmethodsBody.  # noqa: E501
        :type cutoff_amount_variable: str
        :param fee_account: The fee_account of this PaymentmethodsBody.  # noqa: E501
        :type fee_account: str
        :param pay_view_code: The pay_view_code of this PaymentmethodsBody.  # noqa: E501
        :type pay_view_code: str
        :param cutoff_amount_fee: The cutoff_amount_fee of this PaymentmethodsBody.  # noqa: E501
        :type cutoff_amount_fee: str
        :param default_payment_type_code: The default_payment_type_code of this PaymentmethodsBody.  # noqa: E501
        :type default_payment_type_code: str
        :param single_payment: The single_payment of this PaymentmethodsBody.  # noqa: E501
        :type single_payment: str
        :param default_pmt_bank_account_no: The default_pmt_bank_account_no of this PaymentmethodsBody.  # noqa: E501
        :type default_pmt_bank_account_no: str
        :param separate_pmt_proposal_head: The separate_pmt_proposal_head of this PaymentmethodsBody.  # noqa: E501
        :type separate_pmt_proposal_head: str
        :param vendor_purpose_text: The vendor_purpose_text of this PaymentmethodsBody.  # noqa: E501
        :type vendor_purpose_text: str
        :param customer_purpose_text: The customer_purpose_text of this PaymentmethodsBody.  # noqa: E501
        :type customer_purpose_text: str
        :param payment_note_purpose_text: The payment_note_purpose_text of this PaymentmethodsBody.  # noqa: E501
        :type payment_note_purpose_text: str
        :param vendor_purpose_text_header: The vendor_purpose_text_header of this PaymentmethodsBody.  # noqa: E501
        :type vendor_purpose_text_header: str
        :param purpose_text_footer: The purpose_text_footer of this PaymentmethodsBody.  # noqa: E501
        :type purpose_text_footer: str
        :param limit_payment_amount_lcy: The limit_payment_amount_lcy of this PaymentmethodsBody.  # noqa: E501
        :type limit_payment_amount_lcy: str
        :param customer_purpose_text_header: The customer_purpose_text_header of this PaymentmethodsBody.  # noqa: E501
        :type customer_purpose_text_header: str
        :param limit_lines_per_head: The limit_lines_per_head of this PaymentmethodsBody.  # noqa: E501
        :type limit_lines_per_head: str
        :param min_pos_payment_note: The min_pos_payment_note of this PaymentmethodsBody.  # noqa: E501
        :type min_pos_payment_note: str
        :param limit_lines_per_head_x: The limit_lines_per_head_x of this PaymentmethodsBody.  # noqa: E501
        :type limit_lines_per_head_x: str
        :param min_pos_payment_note_x: The min_pos_payment_note_x of this PaymentmethodsBody.  # noqa: E501
        :type min_pos_payment_note_x: str
        :param tenant: The tenant of this PaymentmethodsBody.  # noqa: E501
        :type tenant: str
        """
        self.swagger_types = {
            'code': str,
            'description': str,
            'bal_account_type': str,
            'bal_account_no': str,
            'surcharge_variable': str,
            'surcharge_fix': str,
            'cutoff_amount_variable': str,
            'fee_account': str,
            'pay_view_code': str,
            'cutoff_amount_fee': str,
            'default_payment_type_code': str,
            'single_payment': str,
            'default_pmt_bank_account_no': str,
            'separate_pmt_proposal_head': str,
            'vendor_purpose_text': str,
            'customer_purpose_text': str,
            'payment_note_purpose_text': str,
            'vendor_purpose_text_header': str,
            'purpose_text_footer': str,
            'limit_payment_amount_lcy': str,
            'customer_purpose_text_header': str,
            'limit_lines_per_head': str,
            'min_pos_payment_note': str,
            'limit_lines_per_head_x': str,
            'min_pos_payment_note_x': str,
            'tenant': str
        }

        self.attribute_map = {
            'code': 'Code',
            'description': 'Description',
            'bal_account_type': 'BalAccountType',
            'bal_account_no': 'BalAccountNo',
            'surcharge_variable': 'SurchargeVariable',
            'surcharge_fix': 'SurchargeFix',
            'cutoff_amount_variable': 'CutoffAmountVariable',
            'fee_account': 'FeeAccount',
            'pay_view_code': 'PayViewCode',
            'cutoff_amount_fee': 'CutoffAmountFee',
            'default_payment_type_code': 'DefaultPaymentTypeCode',
            'single_payment': 'SinglePayment',
            'default_pmt_bank_account_no': 'DefaultPmtBankAccountNo',
            'separate_pmt_proposal_head': 'SeparatePmtProposalHead',
            'vendor_purpose_text': 'VendorPurposeText',
            'customer_purpose_text': 'CustomerPurposeText',
            'payment_note_purpose_text': 'PaymentNotePurposeText',
            'vendor_purpose_text_header': 'VendorPurposeTextHeader',
            'purpose_text_footer': 'PurposeTextFooter',
            'limit_payment_amount_lcy': 'LimitPaymentAmountLCY',
            'customer_purpose_text_header': 'CustomerPurposeTextHeader',
            'limit_lines_per_head': 'LimitLinesPerHead',
            'min_pos_payment_note': 'MinPosPaymentNote',
            'limit_lines_per_head_x': 'LimitLinesPerHeadX',
            'min_pos_payment_note_x': 'MinPosPaymentNoteX',
            'tenant': 'Tenant'
        }
        self._code = code
        self._description = description
        self._bal_account_type = bal_account_type
        self._bal_account_no = bal_account_no
        self._surcharge_variable = surcharge_variable
        self._surcharge_fix = surcharge_fix
        self._cutoff_amount_variable = cutoff_amount_variable
        self._fee_account = fee_account
        self._pay_view_code = pay_view_code
        self._cutoff_amount_fee = cutoff_amount_fee
        self._default_payment_type_code = default_payment_type_code
        self._single_payment = single_payment
        self._default_pmt_bank_account_no = default_pmt_bank_account_no
        self._separate_pmt_proposal_head = separate_pmt_proposal_head
        self._vendor_purpose_text = vendor_purpose_text
        self._customer_purpose_text = customer_purpose_text
        self._payment_note_purpose_text = payment_note_purpose_text
        self._vendor_purpose_text_header = vendor_purpose_text_header
        self._purpose_text_footer = purpose_text_footer
        self._limit_payment_amount_lcy = limit_payment_amount_lcy
        self._customer_purpose_text_header = customer_purpose_text_header
        self._limit_lines_per_head = limit_lines_per_head
        self._min_pos_payment_note = min_pos_payment_note
        self._limit_lines_per_head_x = limit_lines_per_head_x
        self._min_pos_payment_note_x = min_pos_payment_note_x
        self._tenant = tenant

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentmethodsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The paymentmethods_body of this PaymentmethodsBody.  # noqa: E501
        :rtype: PaymentmethodsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this PaymentmethodsBody.

        The code of the payment method  # noqa: E501

        :return: The code of this PaymentmethodsBody.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this PaymentmethodsBody.

        The code of the payment method  # noqa: E501

        :param code: The code of this PaymentmethodsBody.
        :type code: str
        """

        self._code = code

    @property
    def description(self) -> str:
        """Gets the description of this PaymentmethodsBody.

        The description of the payment method  # noqa: E501

        :return: The description of this PaymentmethodsBody.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PaymentmethodsBody.

        The description of the payment method  # noqa: E501

        :param description: The description of this PaymentmethodsBody.
        :type description: str
        """

        self._description = description

    @property
    def bal_account_type(self) -> str:
        """Gets the bal_account_type of this PaymentmethodsBody.

        The balance account type of the payment method  # noqa: E501

        :return: The bal_account_type of this PaymentmethodsBody.
        :rtype: str
        """
        return self._bal_account_type

    @bal_account_type.setter
    def bal_account_type(self, bal_account_type: str):
        """Sets the bal_account_type of this PaymentmethodsBody.

        The balance account type of the payment method  # noqa: E501

        :param bal_account_type: The bal_account_type of this PaymentmethodsBody.
        :type bal_account_type: str
        """

        self._bal_account_type = bal_account_type

    @property
    def bal_account_no(self) -> str:
        """Gets the bal_account_no of this PaymentmethodsBody.

        The balance account number of the payment method  # noqa: E501

        :return: The bal_account_no of this PaymentmethodsBody.
        :rtype: str
        """
        return self._bal_account_no

    @bal_account_no.setter
    def bal_account_no(self, bal_account_no: str):
        """Sets the bal_account_no of this PaymentmethodsBody.

        The balance account number of the payment method  # noqa: E501

        :param bal_account_no: The bal_account_no of this PaymentmethodsBody.
        :type bal_account_no: str
        """

        self._bal_account_no = bal_account_no

    @property
    def surcharge_variable(self) -> str:
        """Gets the surcharge_variable of this PaymentmethodsBody.

        The surcharge percentage (variable) of the payment method  # noqa: E501

        :return: The surcharge_variable of this PaymentmethodsBody.
        :rtype: str
        """
        return self._surcharge_variable

    @surcharge_variable.setter
    def surcharge_variable(self, surcharge_variable: str):
        """Sets the surcharge_variable of this PaymentmethodsBody.

        The surcharge percentage (variable) of the payment method  # noqa: E501

        :param surcharge_variable: The surcharge_variable of this PaymentmethodsBody.
        :type surcharge_variable: str
        """

        self._surcharge_variable = surcharge_variable

    @property
    def surcharge_fix(self) -> str:
        """Gets the surcharge_fix of this PaymentmethodsBody.

        The surcharge amount (fixed) of the payment method  # noqa: E501

        :return: The surcharge_fix of this PaymentmethodsBody.
        :rtype: str
        """
        return self._surcharge_fix

    @surcharge_fix.setter
    def surcharge_fix(self, surcharge_fix: str):
        """Sets the surcharge_fix of this PaymentmethodsBody.

        The surcharge amount (fixed) of the payment method  # noqa: E501

        :param surcharge_fix: The surcharge_fix of this PaymentmethodsBody.
        :type surcharge_fix: str
        """

        self._surcharge_fix = surcharge_fix

    @property
    def cutoff_amount_variable(self) -> str:
        """Gets the cutoff_amount_variable of this PaymentmethodsBody.

        The cutoff amount (variable) of the payment method  # noqa: E501

        :return: The cutoff_amount_variable of this PaymentmethodsBody.
        :rtype: str
        """
        return self._cutoff_amount_variable

    @cutoff_amount_variable.setter
    def cutoff_amount_variable(self, cutoff_amount_variable: str):
        """Sets the cutoff_amount_variable of this PaymentmethodsBody.

        The cutoff amount (variable) of the payment method  # noqa: E501

        :param cutoff_amount_variable: The cutoff_amount_variable of this PaymentmethodsBody.
        :type cutoff_amount_variable: str
        """

        self._cutoff_amount_variable = cutoff_amount_variable

    @property
    def fee_account(self) -> str:
        """Gets the fee_account of this PaymentmethodsBody.

        The fee account of the payment method  # noqa: E501

        :return: The fee_account of this PaymentmethodsBody.
        :rtype: str
        """
        return self._fee_account

    @fee_account.setter
    def fee_account(self, fee_account: str):
        """Sets the fee_account of this PaymentmethodsBody.

        The fee account of the payment method  # noqa: E501

        :param fee_account: The fee_account of this PaymentmethodsBody.
        :type fee_account: str
        """

        self._fee_account = fee_account

    @property
    def pay_view_code(self) -> str:
        """Gets the pay_view_code of this PaymentmethodsBody.

        The pay view code of the payment method  # noqa: E501

        :return: The pay_view_code of this PaymentmethodsBody.
        :rtype: str
        """
        return self._pay_view_code

    @pay_view_code.setter
    def pay_view_code(self, pay_view_code: str):
        """Sets the pay_view_code of this PaymentmethodsBody.

        The pay view code of the payment method  # noqa: E501

        :param pay_view_code: The pay_view_code of this PaymentmethodsBody.
        :type pay_view_code: str
        """

        self._pay_view_code = pay_view_code

    @property
    def cutoff_amount_fee(self) -> str:
        """Gets the cutoff_amount_fee of this PaymentmethodsBody.

        The cutoff amount for fee of the payment method  # noqa: E501

        :return: The cutoff_amount_fee of this PaymentmethodsBody.
        :rtype: str
        """
        return self._cutoff_amount_fee

    @cutoff_amount_fee.setter
    def cutoff_amount_fee(self, cutoff_amount_fee: str):
        """Sets the cutoff_amount_fee of this PaymentmethodsBody.

        The cutoff amount for fee of the payment method  # noqa: E501

        :param cutoff_amount_fee: The cutoff_amount_fee of this PaymentmethodsBody.
        :type cutoff_amount_fee: str
        """

        self._cutoff_amount_fee = cutoff_amount_fee

    @property
    def default_payment_type_code(self) -> str:
        """Gets the default_payment_type_code of this PaymentmethodsBody.

        The default payment type code of the payment method  # noqa: E501

        :return: The default_payment_type_code of this PaymentmethodsBody.
        :rtype: str
        """
        return self._default_payment_type_code

    @default_payment_type_code.setter
    def default_payment_type_code(self, default_payment_type_code: str):
        """Sets the default_payment_type_code of this PaymentmethodsBody.

        The default payment type code of the payment method  # noqa: E501

        :param default_payment_type_code: The default_payment_type_code of this PaymentmethodsBody.
        :type default_payment_type_code: str
        """

        self._default_payment_type_code = default_payment_type_code

    @property
    def single_payment(self) -> str:
        """Gets the single_payment of this PaymentmethodsBody.

        Indicates if single payment is enabled or not  # noqa: E501

        :return: The single_payment of this PaymentmethodsBody.
        :rtype: str
        """
        return self._single_payment

    @single_payment.setter
    def single_payment(self, single_payment: str):
        """Sets the single_payment of this PaymentmethodsBody.

        Indicates if single payment is enabled or not  # noqa: E501

        :param single_payment: The single_payment of this PaymentmethodsBody.
        :type single_payment: str
        """

        self._single_payment = single_payment

    @property
    def default_pmt_bank_account_no(self) -> str:
        """Gets the default_pmt_bank_account_no of this PaymentmethodsBody.

        The default payment bank account number of the payment method  # noqa: E501

        :return: The default_pmt_bank_account_no of this PaymentmethodsBody.
        :rtype: str
        """
        return self._default_pmt_bank_account_no

    @default_pmt_bank_account_no.setter
    def default_pmt_bank_account_no(self, default_pmt_bank_account_no: str):
        """Sets the default_pmt_bank_account_no of this PaymentmethodsBody.

        The default payment bank account number of the payment method  # noqa: E501

        :param default_pmt_bank_account_no: The default_pmt_bank_account_no of this PaymentmethodsBody.
        :type default_pmt_bank_account_no: str
        """

        self._default_pmt_bank_account_no = default_pmt_bank_account_no

    @property
    def separate_pmt_proposal_head(self) -> str:
        """Gets the separate_pmt_proposal_head of this PaymentmethodsBody.

        Indicates if separate payment proposal head is enabled or not  # noqa: E501

        :return: The separate_pmt_proposal_head of this PaymentmethodsBody.
        :rtype: str
        """
        return self._separate_pmt_proposal_head

    @separate_pmt_proposal_head.setter
    def separate_pmt_proposal_head(self, separate_pmt_proposal_head: str):
        """Sets the separate_pmt_proposal_head of this PaymentmethodsBody.

        Indicates if separate payment proposal head is enabled or not  # noqa: E501

        :param separate_pmt_proposal_head: The separate_pmt_proposal_head of this PaymentmethodsBody.
        :type separate_pmt_proposal_head: str
        """

        self._separate_pmt_proposal_head = separate_pmt_proposal_head

    @property
    def vendor_purpose_text(self) -> str:
        """Gets the vendor_purpose_text of this PaymentmethodsBody.

        The vendor purpose text of the payment method  # noqa: E501

        :return: The vendor_purpose_text of this PaymentmethodsBody.
        :rtype: str
        """
        return self._vendor_purpose_text

    @vendor_purpose_text.setter
    def vendor_purpose_text(self, vendor_purpose_text: str):
        """Sets the vendor_purpose_text of this PaymentmethodsBody.

        The vendor purpose text of the payment method  # noqa: E501

        :param vendor_purpose_text: The vendor_purpose_text of this PaymentmethodsBody.
        :type vendor_purpose_text: str
        """

        self._vendor_purpose_text = vendor_purpose_text

    @property
    def customer_purpose_text(self) -> str:
        """Gets the customer_purpose_text of this PaymentmethodsBody.

        The customer purpose text of the payment method  # noqa: E501

        :return: The customer_purpose_text of this PaymentmethodsBody.
        :rtype: str
        """
        return self._customer_purpose_text

    @customer_purpose_text.setter
    def customer_purpose_text(self, customer_purpose_text: str):
        """Sets the customer_purpose_text of this PaymentmethodsBody.

        The customer purpose text of the payment method  # noqa: E501

        :param customer_purpose_text: The customer_purpose_text of this PaymentmethodsBody.
        :type customer_purpose_text: str
        """

        self._customer_purpose_text = customer_purpose_text

    @property
    def payment_note_purpose_text(self) -> str:
        """Gets the payment_note_purpose_text of this PaymentmethodsBody.

        The payment note purpose text of the payment method  # noqa: E501

        :return: The payment_note_purpose_text of this PaymentmethodsBody.
        :rtype: str
        """
        return self._payment_note_purpose_text

    @payment_note_purpose_text.setter
    def payment_note_purpose_text(self, payment_note_purpose_text: str):
        """Sets the payment_note_purpose_text of this PaymentmethodsBody.

        The payment note purpose text of the payment method  # noqa: E501

        :param payment_note_purpose_text: The payment_note_purpose_text of this PaymentmethodsBody.
        :type payment_note_purpose_text: str
        """

        self._payment_note_purpose_text = payment_note_purpose_text

    @property
    def vendor_purpose_text_header(self) -> str:
        """Gets the vendor_purpose_text_header of this PaymentmethodsBody.

        The vendor purpose text header of the payment method  # noqa: E501

        :return: The vendor_purpose_text_header of this PaymentmethodsBody.
        :rtype: str
        """
        return self._vendor_purpose_text_header

    @vendor_purpose_text_header.setter
    def vendor_purpose_text_header(self, vendor_purpose_text_header: str):
        """Sets the vendor_purpose_text_header of this PaymentmethodsBody.

        The vendor purpose text header of the payment method  # noqa: E501

        :param vendor_purpose_text_header: The vendor_purpose_text_header of this PaymentmethodsBody.
        :type vendor_purpose_text_header: str
        """

        self._vendor_purpose_text_header = vendor_purpose_text_header

    @property
    def purpose_text_footer(self) -> str:
        """Gets the purpose_text_footer of this PaymentmethodsBody.

        The purpose text footer of the payment method  # noqa: E501

        :return: The purpose_text_footer of this PaymentmethodsBody.
        :rtype: str
        """
        return self._purpose_text_footer

    @purpose_text_footer.setter
    def purpose_text_footer(self, purpose_text_footer: str):
        """Sets the purpose_text_footer of this PaymentmethodsBody.

        The purpose text footer of the payment method  # noqa: E501

        :param purpose_text_footer: The purpose_text_footer of this PaymentmethodsBody.
        :type purpose_text_footer: str
        """

        self._purpose_text_footer = purpose_text_footer

    @property
    def limit_payment_amount_lcy(self) -> str:
        """Gets the limit_payment_amount_lcy of this PaymentmethodsBody.

        The limit payment amount in local currency of the payment method  # noqa: E501

        :return: The limit_payment_amount_lcy of this PaymentmethodsBody.
        :rtype: str
        """
        return self._limit_payment_amount_lcy

    @limit_payment_amount_lcy.setter
    def limit_payment_amount_lcy(self, limit_payment_amount_lcy: str):
        """Sets the limit_payment_amount_lcy of this PaymentmethodsBody.

        The limit payment amount in local currency of the payment method  # noqa: E501

        :param limit_payment_amount_lcy: The limit_payment_amount_lcy of this PaymentmethodsBody.
        :type limit_payment_amount_lcy: str
        """

        self._limit_payment_amount_lcy = limit_payment_amount_lcy

    @property
    def customer_purpose_text_header(self) -> str:
        """Gets the customer_purpose_text_header of this PaymentmethodsBody.

        The customer purpose text header of the payment method  # noqa: E501

        :return: The customer_purpose_text_header of this PaymentmethodsBody.
        :rtype: str
        """
        return self._customer_purpose_text_header

    @customer_purpose_text_header.setter
    def customer_purpose_text_header(self, customer_purpose_text_header: str):
        """Sets the customer_purpose_text_header of this PaymentmethodsBody.

        The customer purpose text header of the payment method  # noqa: E501

        :param customer_purpose_text_header: The customer_purpose_text_header of this PaymentmethodsBody.
        :type customer_purpose_text_header: str
        """

        self._customer_purpose_text_header = customer_purpose_text_header

    @property
    def limit_lines_per_head(self) -> str:
        """Gets the limit_lines_per_head of this PaymentmethodsBody.

        The limit lines per head of the payment method  # noqa: E501

        :return: The limit_lines_per_head of this PaymentmethodsBody.
        :rtype: str
        """
        return self._limit_lines_per_head

    @limit_lines_per_head.setter
    def limit_lines_per_head(self, limit_lines_per_head: str):
        """Sets the limit_lines_per_head of this PaymentmethodsBody.

        The limit lines per head of the payment method  # noqa: E501

        :param limit_lines_per_head: The limit_lines_per_head of this PaymentmethodsBody.
        :type limit_lines_per_head: str
        """

        self._limit_lines_per_head = limit_lines_per_head

    @property
    def min_pos_payment_note(self) -> str:
        """Gets the min_pos_payment_note of this PaymentmethodsBody.

        The minimum positive payment note of the payment method  # noqa: E501

        :return: The min_pos_payment_note of this PaymentmethodsBody.
        :rtype: str
        """
        return self._min_pos_payment_note

    @min_pos_payment_note.setter
    def min_pos_payment_note(self, min_pos_payment_note: str):
        """Sets the min_pos_payment_note of this PaymentmethodsBody.

        The minimum positive payment note of the payment method  # noqa: E501

        :param min_pos_payment_note: The min_pos_payment_note of this PaymentmethodsBody.
        :type min_pos_payment_note: str
        """

        self._min_pos_payment_note = min_pos_payment_note

    @property
    def limit_lines_per_head_x(self) -> str:
        """Gets the limit_lines_per_head_x of this PaymentmethodsBody.

        The limit lines per head X of the payment method  # noqa: E501

        :return: The limit_lines_per_head_x of this PaymentmethodsBody.
        :rtype: str
        """
        return self._limit_lines_per_head_x

    @limit_lines_per_head_x.setter
    def limit_lines_per_head_x(self, limit_lines_per_head_x: str):
        """Sets the limit_lines_per_head_x of this PaymentmethodsBody.

        The limit lines per head X of the payment method  # noqa: E501

        :param limit_lines_per_head_x: The limit_lines_per_head_x of this PaymentmethodsBody.
        :type limit_lines_per_head_x: str
        """

        self._limit_lines_per_head_x = limit_lines_per_head_x

    @property
    def min_pos_payment_note_x(self) -> str:
        """Gets the min_pos_payment_note_x of this PaymentmethodsBody.

        The minimum positive payment note X of the payment method  # noqa: E501

        :return: The min_pos_payment_note_x of this PaymentmethodsBody.
        :rtype: str
        """
        return self._min_pos_payment_note_x

    @min_pos_payment_note_x.setter
    def min_pos_payment_note_x(self, min_pos_payment_note_x: str):
        """Sets the min_pos_payment_note_x of this PaymentmethodsBody.

        The minimum positive payment note X of the payment method  # noqa: E501

        :param min_pos_payment_note_x: The min_pos_payment_note_x of this PaymentmethodsBody.
        :type min_pos_payment_note_x: str
        """

        self._min_pos_payment_note_x = min_pos_payment_note_x

    @property
    def tenant(self) -> str:
        """Gets the tenant of this PaymentmethodsBody.

        The tenant name  # noqa: E501

        :return: The tenant of this PaymentmethodsBody.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant: str):
        """Sets the tenant of this PaymentmethodsBody.

        The tenant name  # noqa: E501

        :param tenant: The tenant of this PaymentmethodsBody.
        :type tenant: str
        """

        self._tenant = tenant
